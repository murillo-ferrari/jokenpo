name: Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install required tools
        run: npm install -g replace-in-file

      - name: Inject Firebase configuration
        run: |
          # Generate the Firebase config JSON
          FIREBASE_JSON=$(printf '{
            "apiKey": "%s",
            "authDomain": "%s",
            "databaseURL": "%s",
            "projectId": "%s",
            "storageBucket": "%s",
            "messagingSenderId": "%s",
            "appId": "%s"
          }' "${{ secrets.FIREBASE_API_KEY }}" \
             "${{ secrets.FIREBASE_AUTH_DOMAIN }}" \
             "${{ secrets.FIREBASE_DATABASE_URL }}" \
             "${{ secrets.FIREBASE_PROJECT_ID }}" \
             "${{ secrets.FIREBASE_STORAGE_BUCKET }}" \
             "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" \
             "${{ secrets.FIREBASE_APP_ID }}")

          # Convert to base64
          FIREBASE_CONFIG=$(echo -n "$FIREBASE_JSON" | base64 -w 0)

          # Replace placeholder in HTML file
          replace-in-file "@@FIREBASE_CONFIG@@" "$FIREBASE_CONFIG" index.html

          # Verify replacement
          if ! grep -q "$FIREBASE_CONFIG" index.html; then
            echo "::error::Failed to inject Firebase configuration"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
