name: Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (minimal)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: false  # Disable cache since we're not using package.json

      - name: Inject Firebase Config
        run: |
          # Install replace-in-file without package.json
          npm install -g replace-in-file
          
          # Generate and encode config
          CONFIG=$(echo -n '{
            "apiKey": "${{ secrets.FIREBASE_API_KEY }}",
            "authDomain": "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
            "databaseURL": "${{ secrets.FIREBASE_DATABASE_URL }}",
            "projectId": "${{ secrets.FIREBASE_PROJECT_ID }}",
            "storageBucket": "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
            "messagingSenderId": "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
            "appId": "${{ secrets.FIREBASE_APP_ID }}"
          }' | base64 -w 0)
          
          replace-in-file "@@FIREBASE_CONFIG@@" "$CONFIG" index.html
          
          # Verify injection
          if ! grep -q "$CONFIG" index.html; then
            echo "::error::Config injection failed"
            exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
